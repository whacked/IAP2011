#+TITLE:     Writing and running analysis in the middle of your paper with org-babel!
#+AUTHOR:    natto
#+EMAIL:     natto@natto-mbp.local
#+DATE:      2010-10-21 Thu
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport



* Abstract

  This is a hands-on, practical workshop in getting started with literate programming (and beyond) with Emacs + org-mode + org-babel. We will touch briefly on the concepts of LP, organizing and manipulating information in org-mode, and dive right into using the uniquely powerful features provided by org-babel: writing documents in multiple programming languages and executing them without leaving your writing environment; outputting, processing, and formatting program output; publishing documents containing (or not) the source code, and the results and figures. This workshop is geared towards: students, researchers, programmers, and individuals who want a more streamlined workflow and more efficient information management methods, write programs with richer and more understandable documentation; anybody who is interested in Knuth's literate programming philosophy, and/or how to write "executable documents".

* ideas from Eric + org-mode community


* Intro

** why should I care?

*** I'm a student/researcher, how does this help me?

    - example of student report with reference management and rapid movement of sections

    - example of paper-in-progress with figures, tables, analysis code

**** I'm a heavy LaTeX user, what's better about this?

     you can always fallback to LaTeX if you want -- show example (o18?)

*** I'm a programmer

**** how is this different from verbose commenting?

     the flow of thought is facilitated differently

*** I'm a monkey, how does this help?

    [[http://doc.norang.ca/org-mode.html][organize your life in plain text]]

** org-mode

   do people care about history?

** literate programming and org-babel

*** intro to literate programming philosophy

    spend no more than 1 minute

*** unique powers of Babel

**** whirlwind demo of babel
     - show a raw completed file and export it nicely

* guide novice users through setting up the org-babel environment

** setting up
in case people don't have git, or, to prevent build difficulties, provide some kind of package

check if athena has it

*** emacs proper
    - [[http://homepage.mac.com/zenitani/emacs-e.html][mac]], linux (cover deb/ubu), [[http://www.claremontmckenna.edu/math/alee/emacs/emacs.html][win]] ([[http://ftp.gnu.org/gnu/emacs/windows/][ftp-w32]]) versions
    - version check
    - provide VM image for people who want minimal fuss
      - xubu or DSL?
    - dot files for novices
    - gotchas like setenv/getenv, exec-path
**** other packages here?
     - *make sure pdflatex works!*
     - ELPA
     - iimage-mode
       - better iimage-mode regex, provide in dotfile
       - gotcha with image path for LaTeX output
     - yasnippet?
     - undo-tree visualizer? undo is not intuitive
*** org proper
    - version check
    - git repo
    - dot files providing common styling options
    - go over common keybindings so people don't get confused like M-up M-down
*** babel
    - version check
    - git repo
    - built-in langauge support and enabling
**** babel languages
     - what el files needed? ruby-inf etc.
     - enabling

** intro to orgmode
   - quick feature rundown?

* evaluating code blocks within a single buffer, in multiple languages

  the fast way to becoming a polyglot

** how this is useful: write code that writes my document for me

*** emacs users -- you might go to eshell first

** demo -- "best tool for the job" in the same file

*** emacs users -- you can use elisp
=(dotimes (counter 10) (insert (format "trial %s: blah\n" counter)))=

to be pedantic:
#+begin_src emacs-lisp
(dotimes (counter 10) (insert (format "trial %s: blah\n" counter)))
#+end_src

*** but you can just use whatever you know well

**** shell script

#+begin_src sh :results output
for i in {1..10}; do echo image-`printf %03d "$i"`.png; done
#+end_src

**** haskell -- there's a bug in haskell output -- last line does not get printed, but it does get evaluated
#+begin_src haskell :results output
import System.Process
show (take 10 [1..])
runCommand "say hi there"
#+end_src

**** ruby, "pagination mockup"
#+begin_src ruby :results output
puts " < [[prev]] | [[next]] >"
puts "=" * 20
20.times do puts "#{(10+(rand 89))} hits | [[" + (0..1+(rand 2)).collect{('a'..'z').to_a.shuffle[0..4+(rand 5)].join}.join(" ") + "]]" end
puts "=" * 20
puts " < [[prev]] | [[next]] >"
#+end_src

**** clojure

clojure+incanter graphics

**** something that reads twitter

**** more relevant example: subject stats with python

**** R "visual area" plots

turns out =do.call= doesn't play nice with 40k-row dataset? plot blows up for x11

** passing evaluation results to other code blocks

* tangling files

** single block tangle

** mutliple files tangle

** multiple blocks into single file

* publishing
** LaTeX headers
   - image captions
   - overriding defaults
** publishing styles

* advanced techniques
  - export option template
  - other export header options
  - post evaluation hooks to format your output
    - worth working on multilingual hook?
  - yasnippets
    - overwrite default src snippet?
  - org-specific: export to beamer

** how to run code across multiple blocks in the same buffer, at once?

*** example

    #+begin_src python
    x = 1
    #+end_src

    #+begin_src python
    print x
    #+end_src

    how to get 1?

**** first attempt


**** second


**** second

   aside of the :noweb directive I don't know if that is possible

   problem with :noweb is that if you keep using noweb includes you might be including more code into a block than you actually want in the tangled output

   the workaround if you really want to eval multiple blocks, in my knowledge, is to use :session. there's the added benefit that it's async (I think so). but side effect code is dangerous

** how to convert my existing LaTeX to org?

** how to convert my code to org?


** tangle-based dev cycle? is this a good idea at all?


* limitations & issues
  - debugging
  - sudo commands from source block
    - ugly workaround: create a session and execute
  - stderr output capture
  - text indentation following a code block is messed up (it indents to match the line within the code block, treating the code line like a text line
  - sometimes tangling causes a :PROPERTIES drawer to appear. reverting does not solve the problem. i have resorted to restarting emacs to stop it. not sure what causes it but today i got it to appear, seemingly after runnin a C-c ' on a non-src-block region, then tangle

** other strange behavior and or bugs
   - not-folding correctly --> revert
   - insert PROPERTIES after tangle, no idea how/why this happens --> revert
   - multiple tangle indentation issue -- solved in email list but doesn't look like integrated in upstream
   - clear undo tree when start org-babel buffer or if you press undo you can clear the screen?
     


   

* specific use-cases and questions. how do I...? etc.
** how do i word-wrap?
   - M-x visual-line-mode

   - I want to include certain lines from a different file into my org file. how do I do that?
   - how large a file can org handle?


   - how to denote separate blocks and related blocks across several sections? i.e.
     - section 1.
       - some text
       - code bit 1
       - some text
       - code bit 2
       - some text
       - code bit continuation of 2
     this is easy to author, but what about execution? is session the way to go?
