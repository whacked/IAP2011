#+TITLE:     Writing and running analysis in the middle of your paper with org-babel!
#+AUTHOR:    natto
#+EMAIL:     natto@natto-mbp.local
#+DATE:      2010-10-21 Thu
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport


* other stuff to add

why i didn't publish earlier

i didn't think i was expert enough

but then i realized how deep this is -- so publish now and revise



* prepwork

- turn on CCMP mouse tracking before begin
- test out screencast recording

* TODO 

   - bring recorder for session (if use, need tell audience)
   - set up athena session and continually export QA

*** procedure.txt

check out http://vimeo.com/16533939


you may need to get users to install git
http://code.google.com/p/msysgit/downloads/list


- git clone https://github.com/eschulte/emacs-starter-kit.git
- curl -O http://ftp.gnu.org/gnu/emacs/windows/emacs-23.2-bin-i386.zip
- unzip emacs
- start emacs with emacs-23.2/bin/runemacs.exe # running the emacs.exe will create an annoying DOS window
- to create your init file, you can just do C-x C-f ~/.emacs, edit it, and it will be loaded on next startup


   3. Move the resulting directory to ~/.emacs.d 1

you can do this within emacs, without really keeping track of the actual ~/.emacs.d location, by typing M-x rename-file --> BLAH/emacs-starter-kit --> ~/.emacs.d/emacs-starter-kit
-- this is actually not a fun way, given the commands that follow

   4. Install the Org-mode submodules with the following

      cd ~/.emacs.d/
      git submodule init
      git submodule update

cloning seems to take a while

   5. build Org-mode

      cd src/org/
      make

make command may require cygwin

   6. build auctex – for instilllation help see the auctex instillation instructions, auctex requires a working TeX installation

      cd src/auctex
      ./configure && make

   7. Launch Emacs!



--- end procedure.txt
-----

** survey of purpose

depending on turnout
try find out whta people need
create twitter refresher or some other interactive method to allow dynamic/realtime feedback

** tips and tricks

no ipython again!

2011-02-02 02:01:41
so i was considering starting an ipython buffer to try something out
then i thought, if it works, i would stick the code into a file
then i thought, why not start with a file to begin with?
so i started a new org file

then i got an error, and thought, wouldn't it be nice if i could run this interactively first?
the solution: add the session header, start a session

2011-02-03 15:04:10
is babel possible in vim?
it looks possible: http://vim.wikia.com/wiki/Execute_Python_from_within_current_file


** best friend keys

because beginners won't take these keys for granted

   (for relative newcomers) do not hesitate to rebind keys. depending on your workflow, the defaults may be suboptimal. doesn't seem like it at first, but 2-keystroke shortcuts can end up feeling too slow!

*** switching between files from the emacs window

C-xb

*** splitting the window

C-x2 (up-down)
C-x3 (left-right)

*** in org-mode

hover over a hyperlink and press C-cC-o

*** quitting



*** navigation

C-cC-n, C-cC-p

*** code blocks

C-'
C-cC-c

org-structure-template-alist

<q
<e
<s
<i

yasnippet users

*** exporting

C-vt
C-ce

** other obscure

(setq org-confirm-babel-evaluate nil)
(setq org-confirm-babel-evaluate t)

*** org-mode mailing list
http://www.mail-archive.com/emacs-orgmode@gnu.org/

** other stuff, check

run through this with L/W/M setup + language environments + exercises...  *exercises?*

we'll just write an entire paper i guess?

* Abstract

  This is a hands-on, practical workshop in getting started with literate programming (and beyond) with Emacs + org-mode + org-babel. We will touch briefly on the concepts of LP, organizing and manipulating information in org-mode, and dive right into using the uniquely powerful features provided by org-babel: writing documents in multiple programming languages and executing them without leaving your writing environment; outputting, processing, and formatting program output; publishing documents containing (or not) the source code, and the results and figures. This workshop is geared towards students, researchers, programmers, and individuals who want a more streamlined workflow and more efficient information management methods, write programs with richer and more understandable documentation; anybody who is interested in Knuth's literate programming philosophy, and/or how to write "executable documents".

** software versions used in this workshop (based on reference systems)
   - emacs (win/mac/lin: 23.2.1, athena: 22.2.1)
   - org-mode (7.4, all setups)
   if you want to run versions as per the reference setup, use the VM

* common concerns

why aren't more people using it?
  - *learning curve* (RTFM is not going to get you new users!)
  - no very good and very clear leader in hand-holding beginners

org-mode (and emacs, for that matter) isn't for everybody, ...

* more examples

check the org paper on executing multiple code blocks with single command? by chaining maybe?

** tracking finances

ref: http://orgmode.org/worg/org-contrib/babel/examples/finances.html

#+tblname: daily-expenses
| Expense | Category |
|---------+----------|
|       2 | Food     |
|       1 | House    |
|      10 | Clothes  |
|       3 | Food     |
|       5 | House    |

#+begin_src R :var tab=daily-expenses :colnames yes
  attach(tab)
  aggregate(Expense ~ Category, FUN=sum)
#+end_src


** our current work

*** nipype coding

running nipype pipeline -- where computationally intensive things should be tangled

*** paper in progress

    inserting subject summaries & figures

** using org-mode to learn a new programming language

*** (semi) interactive tutorial

    ruby koans example

*** writing an interactive tutorial (or programming book)

    show how Zed Shaw's "How To Write A LxTHW" is a perfect fit
    http://sheddingbikes.com/posts/1288945508.html

*** generating an interactive programming book a single command

    lua tutorial

* ideas from Eric + org-mode community

** initial demo -- demonstrate how the workflow is useful

   multiple export -- html + pdf;
   setup a "live update" machine with an iframe that keeps refreshing on an html page + pdf viewer to demonstrate export

** the Emacs starter kit

   If you search, there a couple versions. [[https://github.com/technomancy/emacs-starter-kit][technomancy's]] is the original, but if you're specifically aiming to jump into org-mode and org-babel, you'll want to get [[http://eschulte.github.com/emacs-starter-kit/][eschulte's]] version.

   To my knowledge, the main difference (and a big one), aside of org-mode, org-babel, auctex, and some other extra packages Eric added, is the maintenance process for the configuration (startup) files.

   When using Eric's version, /most of the .el files get generated from .org files/, so most of your configrations would be contained in source blocks in the .org files. If you check out the emacs-starter-kit documentation, you'll also realize that it's an export of those same .org files!

** hands-on examples?

After that I'd recommend a quick general Org-mode introduction (see Worg for resources) and then I'll recommend a couple of resources for code block specific examples.

1) Babel Paper by Dan, Carsten, Tom, Eric :: https://github.com/eschulte/babel-dev/raw/master/paper/babel.org

2) scraps.org :: https://github.com/eschulte/babel-dev/raw/master/scraps.org

3) Worg
  - http://orgmode.org/worg/org-contrib/babel/intro.php
  - http://orgmode.org/worg/org-contrib/babel/uses.php


** after you install the starter kit

if you want to generate the exact same webpage you see on http://eschulte.github.com/emacs-starter-kit/,
simply export it! (show export)

* Intro (non-hands-on)

(first few sections starting from [[file:Script.org::*where%20is%20everybody%20from?][where is everybody from?]])

* Setting up

#+include "~/note/IAP/IAP2011/Setting-up.org"

* quick orgmode rundown

  If you are not familiar with org-mode, you can just think about it as a plugin for emacs that gives general purpose outlining functionality. This will make your files centered around hierarchical headlines and entries. What this means for us is that now when we are writing, for example, a research report, we will put the relevant analysis code under the relevant section; we will be thinking about how and where the code fits within the flow of the report.

  Here's an example of a working outline of a paper explaining the remarkable properties of stars.

** remarkable properties of stars

   stars are remarkable

*** why stars are remarkable

**** proof that stars are remarkable

move this stuff around

this functionality alone makes org-mode useful!

for more, check out [[final notes, links and resources]]

* evaluating code blocks within a single buffer, in multiple languages

  the fast way to becoming a polyglot

** how this is useful: write code that writes my document for me

*** emacs lisp... rather stupid example

#+begin_src emacs-lisp
  (dotimes (counter 10) (insert (format "trial %s: blah\n" counter)))
#+end_src

#+results:

*** use what you are familiar with

**** shell script

#+begin_src sh :results output
for i in {1..10}; do echo image-`printf %03d "$i"`.png; done
#+end_src

**** haskell -- there seesm to be a bug in haskell output -- last line does not get printed, but it does get evaluated

#+begin_src haskell :results output
import System.Process
show (take 10 [1..])
runCommand "echo hi there | espeak"
#+end_src

**** ruby, "pagination mockup" -- probably not

demo the exported version of this after running

use case = programming blog?

#+begin_src ruby :results output
puts " < [[prev]] | [[next]] >"
puts "=" * 20
20.times do puts "#{(10+(rand 89))} hits | [[" + (0..1+(rand 2)).collect{('a'..'z').to_a.shuffle[0..4+(rand 5)].join}.join(" ") + "]]" end
puts "=" * 20
puts " < [[prev]] | [[next]] >"
#+end_src

**** something that reads twitter... ???? probably not

**** more relevant example: subject stats with python

**** other example -- submission to satra, compare benchmark of loop vs. regex

#+begin_src python :results output
import time, sys, re

ls_test = (" i am illegal file name with spaces",
        "zxocvijOZJVPOIJDFPOJSDOFIJ89u40958qu3405982345zlvjlzj.......oxzijc",
        "54984to8vz9x(*&()*@&%)(*&#$)(*@UC*V^(X d98)(&)(////",
        "asdf/asdf/zije/rta/e46/4567<F5>/4t/hx/rtu0485",
        "!@#$%^&*())`-=",
        )
def get_valid_pathstr(pathstr):
    for symbol in [' ','[',']','(',')','{','}','?',':','<','>','#','!','|','"',';']:
        pathstr = pathstr.replace(symbol, '')
    return pathstr

def get_valid_pathstr_re(pathstr):
    return re.sub(r'''[] (){}?:<>#!|"';]''', '', pathstr)

# test methods are equal
for test in ls_test:
    o, n = get_valid_pathstr(test), get_valid_pathstr_re(test)
    if o != n:
        print "OLD GIVES:", o
        print "NEW GIVES:", n
    
NROUND = 10**5
STARTPATH = "LOREMIPSUMSITDOLORAMET"

def test(func, count):
    t0 = time.time()
    for i in xrange(count):
        func(STARTPATH)
    print time.time()-t0

for USE_REGEXP in False, True:
    if USE_REGEXP:
        print "use regex"
        test(get_valid_pathstr_re, NROUND)
    else:
        print "use old"
        test(get_valid_pathstr, NROUND)

#+end_src

*** what about something iterative/interactive?

**** using octave

     If you use a single, one-off source block, babel will usually just run the script, grab the output, quit the script, and output the result according to the =:results= parameters. In other words, you won't be able to use figures:

     #+begin_src octave :results output
       figure
       disp('do you see my figure?')
     #+end_src

     To show figures, you'll need a persistent *session* running as an "inferior process". Use the =:session= header to start one:

     #+begin_src octave :results output :session looking-for-my-octave-session
       figure
       disp('do you see my figure?')
       x = linspace(0, pi, 20);
       y = sin(x);

     #+end_src
     
     the results don't get output like before though

     Since it's an actual process running within emacs, you can jump to that "session" and use it like your normal inferior process. To do this, go to a code block that has the session name set to the one you want:

     #+begin_src octave :session looking-for-my-octave-session
       disp('I am looking for my octave session')
       disp('if you run M-x org-babel-pop-to-session here -- or do C-x C-e at the closing parenthesis here: (org-babel-pop-to-session), you''ll find your session!')
       plot(x, y)
     #+end_src

     You'll be able to run =quit= from the octave session and quit it. If you re-execute the octave block again, it will restart a new session for you (obviously, you'll lose any of the values you've set from the previous execution)

**** using R

     #+begin_src R :session test-r
       x <- seq(0, pi, length.out=20)
       y <- sin(x)
       
     #+end_src
     
     #+begin_src R :session test-r
       plot(y ~ x)
     #+end_src

**** R "visual area" plots

  turns out =do.call= doesn't play nice with 40k-row dataset? plot blows up for x11

  use sessions instead

** passing evaluation results to other code blocks


* include files

#+INCLUDE: "~/note/IAP/IAP2011/Rtest.org"

* tangling files

** single block tangle

** mutliple files tangle

** multiple blocks into single file

* publishing
** LaTeX headers
   - image captions
   - overriding defaults
** publishing styles

* advanced techniques
  - export option template
  - other export header options
  - post evaluation hooks to format your output
    - worth working on multilingual hook?
  - yasnippets
    - overwrite default src snippet?
  - org-specific: export to beamer

** other uses
   
   there is an org file parser for ruby called org-ruby

   integration with gollum = org+git+wiki
   https://github.com/github/gollum

** how to run code across multiple blocks in the same buffer, at once?

*** example

    #+begin_src python
    x = 1
    #+end_src

    #+begin_src python
    print x
    #+end_src

    how to get 1?

**** see example from paper or worg. pascal triangle is probably best

    aside of the :noweb directive I don't know if that is possible

    problem with :noweb is that if you keep using noweb includes you might be including more code into a block than you actually want in the tangled output

    the workaround if you really want to eval multiple blocks, in my knowledge, is to use :session. there's the added benefit that it's async (I think so). but side effect code is dangerous

** how to convert my existing LaTeX to org?

*** ikmeans example

**** original

     Here's a document about cluster analysis from a friend of mine, written in LaTeX
     
     [[~/note/statistics/cluster analysis/arnaldo-ikmeans/arnaldo-ikmeans.tex]]

     current output looks like this

     [[~/note/statistics/cluster analysis/arnaldo-ikmeans/arnaldo-ikmeans.pdf]]

**** conversion attempt 1, direct include

     create a conversion file here (make sure it's not the same name, or the original .tex file may get overwritten during export!)

     [[~/note/statistics/cluster analysis/arnaldo-ikmeans/arnaldo-ikmeans-converted.org]]

     the initial contents -- this can already export

     #+begin_src latex :tangle arnaldo-ikmeans-converted-1.tex
       \include{arnaldo-ikmeans}
     #+end_src

**** attempt 2, put all LaTeX into a single latex block

     of course it doesn't all come out right, because this command simply inserts the origin LaTeX document's contents into the file, while org-mode has its own default document template. To fix this, I'm going to do is insert the original contents myself and reappropriate the LaTeX headers for org-mode's export.
     
     #+begin_src latex :tangle arnaldo-ikmeans-converted-2.tex
       ... (insert entire file contents)
     #+end_src

     this asks whether we want to eval, sure -- that generates the LaTeX that is used to export

**** attempt 3, changing LaTeX directives into org-mode headers

     it turns out that the default LaTeX directives that org-mode uses doesn't play nice with the original, so we override them by changing the title, adding some headers, and a bit of elisp that adds the headers the way we want:

     #+begin_src org
       ,#+TITLE: Notes on Exploratory Data Analysis
       ,#+AUTHOR: Arnaldo E. Pereira
       ,#+LATEX_CLASS: org-article
       ,#+LaTeX_CLASS_OPTIONS: []
       ,#+LaTeX_HEADER: \usepackage{amssymb}
       ,#+LaTeX_HEADER: \usepackage{amsmath}
       ,#+LaTeX_HEADER: \usepackage{fullpage}
       ,#+LaTeX_HEADER: \usepackage{graphicx}
       ,     
     #+end_src
     
     #+begin_src emacs-lisp :exports none
       (add-to-list 'org-export-latex-classes
             '("org-article"
                "\\documentclass{article}
                [NO-DEFAULT-PACKAGES]
                [PACKAGES]
                [EXTRA]"
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                ("\\paragraph{%s}" . "\\paragraph*{%s}")
                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
     #+end_src

     #+begin_src latex
       \newcommand{\kmeans}{$K$-means }
       \newcommand{\figurebox}[1]{\begin{center}\fbox{\includegraphics[height=2.8in]{#1}}\end{center}}
       ...
       
     #+end_src

     my export program doesn't like the eps files I'm linking to... maybe change these but if not, resort to:

     #+begin_src sh
       texi2dvi arnaldo-ikmeans-converted.tex
       dvipdf arnaldo-ikmeans-converted.dvi
            
     #+end_src
     
     and it looks about right!

**** attempt 4 and so on...

     convert the latex to org, if you so wish

** how to convert my code to org?

   This is an example taken from the nipype fsl tutorial... and we change it to org code.

** tangle-based dev cycle? is this a good idea at all?

   the bad is before you execute, you need to tangle

   the good is you're always in a "prose friendly" environment that allows you to quickly switch between report sections / documentation and code.

*** creating hooks to auto-execute

    don't have a beautiful solution yet


** header arguments + Eric's scraps.org

*** caching

http://orgmode.org/manual/cache.html#cache

*** eval query
http://orgmode.org/manual/Specific-header-arguments.html#Specific-header-arguments

- never :: prevents execution of the block, period.
- query :: asks you whether you want to evaluate, regardless of your confirm-evaluate setting

*** new file

#+begin_src sh :sep , :file dirlisting
  ls -l
#+end_src

#+begin_src ruby :file ruby-out
  [[1, 2, 3, 4],
   [2, 4, 6, 8]]
#+end_src

#+begin_src emacs-lisp :results file :results append
  (let ((today (replace-regexp-in-string "[ \t]" "-" (current-time-string))))
    (with-temp-file today
      (insert (message "I'm feeling %s"
                       (nth (random 3) (list "good" "bad" "just fine")))))
    today)
#+end_src

from http://www.graphviz.org/Gallery/directed/fsm.gv.txt
#+begin_src dot :file fsa.png
  digraph finite_state_machine {
          rankdir=LR;
          size="8,5"
          node [shape = doublecircle]; LR_0 LR_3 LR_4 LR_8;
          node [shape = circle];
          LR_0 -> LR_2 [ label = "SS(B)" ];
          LR_0 -> LR_1 [ label = "SS(S)" ];
          LR_1 -> LR_3 [ label = "S($end)" ];
          LR_2 -> LR_6 [ label = "SS(b)" ];
          LR_2 -> LR_5 [ label = "SS(a)" ];
          LR_2 -> LR_4 [ label = "S(A)" ];
          LR_5 -> LR_7 [ label = "S(b)" ];
          LR_5 -> LR_5 [ label = "S(a)" ];
          LR_6 -> LR_6 [ label = "S(b)" ];
          LR_6 -> LR_5 [ label = "S(a)" ];
          LR_7 -> LR_8 [ label = "S(b)" ];
          LR_7 -> LR_5 [ label = "S(a)" ];
          LR_8 -> LR_6 [ label = "S(b)" ];
          LR_8 -> LR_5 [ label = "S(a)" ];
  }
#+end_src


* limitations & issues
  this is an old list. bugs are being actively stamped out. some of these may no longer be bugs

  - debugging; to my knowledge, std error capturing is in development. my workaround is to switch between tangled scripts, the command line, and the org buffer
  - sudo commands (or interaction of anykind) from source block
    - ugly workaround: create a session and execute
    - fall back on inf-process


** other strange behavior and or bugs
   - sometimes org-mode stops folding correctly --> revert
   - sometimes tangling causes a :PROPERTIES drawer to appear. reverting does not always solve the problem. i have resorted to restarting emacs to stop it. not sure what causes it but today i got it to appear, seemingly after runnin a C-c ' on a non-src-block region, then tangle
   - multiple tangle indentation issue -- solved in email list but doesn't look like integrated in upstream
   - clear undo tree when start org-babel buffer or if you press undo you can clear the screen?
     

   

* specific use-cases and questions. how do I...? etc.

   - how do i word-wrap? :: M-x visual-line-mode
   - I want to include certain lines from a different file into my org file. how do I do that?
   - how large a file can org handle? -- syntax highlighting does get slower when the file is large

   - how to denote separate blocks and related blocks across several sections? i.e.
     - section 1.
       - some text
       - code bit 1
       - some text
       - code bit 2
       - some text
       - code bit continuation of 2
     this is easy to author, but what about execution? is session the way to go?

   - different-size headers? :: M-x customize-group org-faces, or:
        #+begin_src emacs-lisp :results silent
          (custom-set-faces
           '(org-level-1 ((t (:inherit outline-1 :weight bold :height 1.6 :family "Verdana"))))
           '(org-level-2 ((t (:inherit outline-2 :height 1.5 :family "Verdana"))))
           )
          
        #+end_src


* final notes, links and resources

  for new explorers ready to take the plunge into org-mode: [[http://doc.norang.ca/org-mode.html][organize your life in plain text]]

  http://orgmode.org/worg/org-contrib/babel/uses.php


* presentation schedule control

automated presentation flow controller

** <schedule controller>

*** <start>
# -- -- -- -- -- -- -- -- -- -- section [[<start>]] started at [2011-01-04 02:33:10]


#+begin_src emacs-lisp
  (org-open-link-from-string "[[Abstract]]")
#+end_src

starting without specified time uses (now)

*** (+2) using relative time!!!
# -- -- -- -- -- -- -- -- -- -- section [[(+2) using relative time!!!]] started at [2011-01-04 02:33:12]


#+begin_src emacs-lisp
  (org-open-link-from-string "[[Setting up]]")
#+end_src

*** (4) used to be absolute -- if use without plus
# -- -- -- -- -- -- -- -- -- -- section [[(4) used to be absolute -- if use without plus]] started at [2011-01-04 02:33:14]
# -- -- -- -- -- -- -- -- -- -- presentation ended at [2011-01-04 02:33:14]



#+begin_src emacs-lisp
  (org-open-link-from-string "[[quick orgmode rundown]]")
#+end_src

** control code

#+begin_src emacs-lisp
  (defun my-org-run-presentation-schedule (&optional next-headline sec0)
    (interactive)
  
    (if (not next-headline) ;; start case, call with no arguments
        (progn (org-open-link-from-string "[[<schedule controller>]]")
               (show-subtree)
               (my-org-run-presentation-schedule "<start>" (second (current-time))))
  
      (let ((time-now (current-time)))
  
        ;;(org-overview)
        (goto-char (org-find-exact-headline-in-buffer next-headline))
        (show-subtree)
        
        (end-of-line)
        (open-line 1)
        (next-line)
        (insert (format "# -- -- -- -- -- -- -- -- -- -- section [[%s]] started at [%s]\n" next-headline (format-time-string "%Y-%m-%d %H:%M:%S" time-now)))
  
        (let (;; determine whether there is another match
              (next-section-loc (save-excursion (search-forward-regexp "^\\*+ \\((\\(\\+?\\)\\(.*\\)) .*\\)" nil t))))
  
          ;; there is a time-specification headline after this one;
          ;; parse it for schedule and queue next run
          (when next-section-loc
            (let* ((next-section-headline (match-string-no-properties 1))
                   (use-relative (> (length (match-string-no-properties 2)) 0))
                   (spl-rev-time (reverse (map 'list 'string-to-number (split-string (match-string-no-properties 3) ":"))))
                   (in-sec (or (first spl-rev-time) 0))
                   (in-min (or (second spl-rev-time) 0))
                   (in-hour (third spl-rev-time))
                   (str-run-time (if use-relative
                                     (format "%s min %s sec %s hour" in-min in-sec (or in-hour 0))
                                   ;; don't absolute next event schedule to exceed 65536 sec so just
                                   ;; calculate offset seconds using low-value from (current-time)
                                   (format "%s sec"
                                           (- (+ sec0 (* 60 in-min) in-sec) (second time-now))))))
              
              ;;(insert (format "(run-at-time %s = str-run-time nil 'my-org-run-presentation-schedule)" str-run-time))
              ;;(insert "NEXT FOUND: " next-section-headline)
              (run-at-time str-run-time nil 'my-org-run-presentation-schedule next-section-headline sec0)
              ))
  
          ;; find and run code blocks
          (let ((next-src-block-end (save-excursion
                                      (re-search-forward org-babel-src-block-regexp nil t)))
                current-ob-evaluate-confirm org-confirm-babel-evaluate)
            (message (format "%s -- %s" next-src-block-end next-section-loc))
            (when (< next-src-block-end (or next-section-loc (buffer-size)))
              (goto-char (match-beginning 0))
              ;;(org-overview)
              ;;(org-show-subtree)
              ;;(org-show-context)
              (beginning-of-line)
              (setq org-confirm-babel-evaluate nil)
              (org-babel-execute-src-block)
              (setq org-confirm-babel-evaluate current-ob-evaluate-confirm)
  
              ;;(goto-char (+ 1 next-src-block-end))
              )
            )
  
          (when (not next-section-loc)
              ;; done -- no more sections with schedule format
            (save-excursion
              (goto-char (org-find-exact-headline-in-buffer next-headline))
              (show-subtree)
              (next-line)
              (end-of-line)
              (open-line 1)
              (next-line)
              (insert (format "# -- -- -- -- -- -- -- -- -- -- presentation ended at [%s]\n" (format-time-string "%Y-%m-%d %H:%M:%S" (current-time)))))
            )))))
  
#+end_src

#+begin_src emacs-lisp
  (my-org-run-presentation-schedule)
#+end_src



