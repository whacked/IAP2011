"Over and over, the successive waves of new startups with structurally more advanced operations ... are enabled due to an advance in tools. Computerized tools, unlike physical tools, can stack their leverage arbitrarily upon each other, compounding their leverage to enormously high levels."

-- Yishan Wong, former director of Engineering, Facebook http://algeri-wong.com/yishan/engineering-management-tools-are-top-priority.html

This is the presentation script. It will also be our example to export into a research-paper-styled document in the end.

#+begin_src emacs-lisp
 (defun count-words (start end)
    "Print number of words in the region."
    (interactive "r")
    (save-excursion
      (save-restriction
        (narrow-to-region start end)
        (goto-char (point-min))
        (message (format "%s" (count-matches "\\sw+"))))))
#+end_src


** <schedule controller>

  (my-org-run-presentation-schedule)

*** <start>


Hello and welcome to this workshop about literate programming in org-mode.

**** is this for me?

good news is if many people get on board it'll be easier to communicate with org files.
on the flip side, if most people really can't get used to it, tha'ts still good news, because it means that our superpowers will remain rare and valuable!

ergo, win for all.


**** internal wiki

**** org-mode is in very active development

**** Mobile-org: sync your org-files via dropbox (or whatever) and read and edit your org-files on the go

- Android https://github.com/matburt/mobileorg-android/wiki/
- iPhone http://mobileorg.ncogni.to/



*** (+30) survey of purpose

- who is a student, researcher, programmer, other?
- who is a total beginner to emacs? to org-mode? to org-babel?

**** i am here because i am dissatisfied with my current tools or workflow?


**** want to learn about literate programming

**** want to learn about programming techniques

**** want to learn about org-mode and babel?

**** want to learn about Emacs...?

**** I'm a pro, just here for the party?

Now you might be asking, why [me], why emacs, org-mode, and org-babel.
If you are completely new to org-babel, then you've come to the right place.

I discovered the org-babel project last summer, so I've only been using it for about half a year, but it's such an amazing piece of work, in a -- literally -- life-changing way, that I've become extremely enthusiastic about it. But for its incredible power it still seems relatively unknown, and that's why I'm here. And hopefully through this workshop, you will be able to find things about org-mode and org-babel that are useful and maybe even get you enthusiastic as well.

*** (+10) A Mistake

I made a mistake in planning out this workshop, and I'll explain these up front just so you know what to expect.

I intended to cater this workshop for a general audience and preferably, people with little exposure to org-babel, literate programming, and maybe even Emacs. The problem with this concept is that:
- if you are familiar with Emacs, it's rather unlikely that you don't know about org-mode, and consequently, org-babel, which comes with the latest version of org-mode; and further consequently, literate programming in org-babel.
- if you are NOT familiar with Emacs, the road from setting up, to harnessing the power of literate programming in Babel is a pretty big step; the exception is linux -- but if you're using linux you're used to RTFM anyway.

carsten dominik gave a talk on org-mode at google. it was over 1 hr long. point is org mode is complex. And I hope this workshop will at least ease you of the frustrations commonly attributed to these programmer-centric text editors

In any case, I'm going to assume you belong to the latter group (otherwise you'll get bored real fast)

*** (+10) The big step


Setting up your environment so that you are able to utilize all of the features in org-babel turns out to be fairly non-trivial on Mac and Windows. I went through Leopard, Snow Leopard, XP, Vista, and Windows 7. It's a test of patience.

My general advice is, if you are not used to setup marathons, you should grab the virtual image and boot up the ubuntu system that I have set up. Then you are guaranteed to have a working system.

For those who want to set up their own systems:

- If you are on a Mac without developer tools and X11, my advice is to grab the virtual image.
- If you are on a vanilla Windows system, and are interested in the pdf export facilities, install texlive now. It may take up to an hour. But we can check out other stuff in the meantime.

For those who are *determined* to set up their system:
Now if you're confident you have the patience, right here, right now, I will have the patience to guide you through your setup.
A forewarning to Mac users: the general advice you'll get, after installing the developer tools, is to install MacPorts. A fresh install from MacPorts can take several hours of installation!

*** Three Disclaimers

So before we really dive in, I have to make three disclaimers

**** Disclaimer 1

I am not affiliated with the developers of either program. I'm just an enthusiastic user. But Eric Schulte, one of the leads of the Babel project, is aware of this workshop though.

**** Disclaimer 2

org-mode has been in development for several years. Emacs has been in development for several decades. The documentation is massive. I've begun using babel in org-mode since last summer. There will be things I don't know. If you know a better way, please share the knowledge. If nobody knows, I'll be happy to find out for you.

**** Disclaimer 3

This workshop is scheduled to be 2.5 hours. There's no way I can fill it up with that much material. I anticipated to use about an hour of that time to make sure everyone is able to get on the same page with setting up their system. But that really doesn't make sense because if you're here and ready to dive into the deep end, I can't ask you to wait for everybody else to get changed.

Therefore, after we start this hands on part, this workshop is going to lose all structure. Depending on how much attention and patience people have left I'll just continue to demonstrate how you might go about playing with your environment.

*** If there are novices: the road to emacs happiness

[[file:emacs-curve.org][cue the chart]]

Proficiency in Emacs is all about key sequences, very much like playing the piano. If you're just starting out and are annoyed by all the key sequences, just remember that you cannot play beautiful music if you don't practice your scales.

*** (+45) what is literate programming, and why org-babel

I've looked around for something that would let me write all kinds of documents as I please, and if needed, write code in it, paste images, do the laundry. Plus, I need to be able to use this at home, at work, on the go. This is the one piece of software that will let you do exactly that, minus the laundry.

Indeed, the entire presentation you see on the screen now is written, and controlled from, an org-babel document.

*** how will this change my workflow? (what's in it for me?)

**** for students and researchers

   - example of student report with reference management and rapid movement of sections

   - example of paper-in-progress with figures, tables, analysis code

***** current LaTeX users


**** for programmers

***** how is this different from verbose commenting?

      the flow of thought is facilitated differently

granted, I have not written a non-trivial program entirely from an org-mode buffer. But I will show you a few examples where starting from, or converting to, and org-mode version of your program is more compelling than the prevalent coding and commenting (e.g. javadoc) styles.

**** literate programming

You might have read or heard about literate programming ...

(show of hands)

Using org-babel is what really explained it to me, and I was an instant fan. Why did it take this long? If you read the Wikipedia article you'll realize that there are a lot of abstract terms like "tangling" and "weaving"

Even if it makes sense, it seems like a lot of work. It actually is: if you have a literate document, you'll need a program to first preprocess the document to separate code from prose. The code then gets put together into source files like your traditional files suitable for compiling. That's the "tangling" step you'll see in the Wikipedia article. On the other hand you have another program that turns your prose and code into a nicely formatted document for human consumption. That's called the "weaving" step.

I could draw a diagram out for you but we'll cover all of these concepts with a few examples, and you'll be wondering why everybody else is doing it wrong. And that's a fair question: the reason, as you'll also notice, is because tangling and weaving requires extra effort, as it requires a separate program for separating human from computer language, and also requires your document editor to be aware of both syntaxes (think spellcheck + code check!).

The nice thing about org-babel is that this tangling and weaving is done automatically behind the scenes. All you do is worry about your one org document, and let emacs and org handle the rest. It really makes literate programming *natural*.

I'm almost done talking.

**** where to put links to worg wiki?


*** unique powers of Babel

**** whirlwind demo of babel
     - show a raw completed file and export it nicely
       
**** hello world from org-babel

So that was exporting. Let me show you what it means to run program code right from your document... in 10 different languages.

***** C

yes, this actually compiles and runs
/somehow syntax highlighting isn't working unless i use lowercase 'c', but compilation requires it to be uppercase/

#+srcname: c_hello
#+begin_src C :results output
  #include <stdio.h>
  int main(void) { printf("C"); return 0; }
#+end_src


***** shell
#+srcname: sh_hello(input = R_hello)
#+begin_src sh :results output
  echo $input sh
  #echo "hello world from" `$SHELL --version | head -1`

#+end_src

***** octave

#+srcname: Z_hello(input = haskell_hello)
#+begin_src ruby :results output
  #print "'Ch';"
  print input.strip
#+end_src



#+srcname: octave_hello(input = haskell_hello)

      
#+srcname: octave_hello(input = Z_hello)
#+begin_src octave :results output
  disp([input 'o']);

#+end_src

***** ruby


#+srcname: ruby_hello(input = lua_hello)
#+begin_src ruby :results output
  # puts input
  # puts "hello world from ruby #{RUBY_VERSION}"
  print "#{input.strip}r"
#+end_src


***** python

#+srcname: python_hello(input = octave_hello)
#+begin_src python :results output
  import sys
  print "%sp" % (input.strip())
  # print input + "\nhello world from python! %s" % sys.version.split("\n")[0]
  
#+end_src

***** emacs-lisp ?

#+srcname: elisp_hello(input = sh_hello)
#+begin_src emacs-lisp :results output
  ;;(concat (or input "") "hello world from emacs lisp on " (first (split-string (version) "\n")))
  (concat (or input "") "el")
#+end_src

***** haskell
   iffy -- haskell may have some bugs

#+srcname: haskell_hello(input = c_hello)
#+begin_src haskell :results output
  putStrLn ("'" ++ input ++ "h';")
  take 1 [1..] -- currently, last line seems to get dropped in results parsing

#+end_src


***** perl
#+srcname: perl_hello(input = python_hello)
#+begin_src perl :results output
  chomp $input;
  print $input . "p";
  # print "hello world from perl " . $];

#+end_src

***** R

#+srcname: R_hello

#+srcname: R_hello(input = perl_hello)
#+begin_src R :results output
  #cat(sprintf("%s\nhello world from %s", input, version$version.string))
  cat(input, "R", sep="")
#+end_src

***** lua (experimental)

#+srcname: zz_hello
#+begin_src ruby :results output
  print "ChoppR shel"
#+end_src

#+srcname: lua_hello(input = zz_hello)

#+srcname: lua_hello(input = elisp_hello)
#+begin_src lua :results output
  print(input.."l")
#+end_src

*** outline of the workshop

This workshop has three major sections (basically high level overview of IAP org file outline)

- setting up your environment
- runnin

If you have (and are using):

*move the setup procedure section*

**** up-to-date emacs with org-mode and org-babel installed already
     Please make sure you are running org version 7.4 =(org-version)=

**** up-to-date emacs
     Do you have a working TeX distribution?

**** vanilla system
     check out the installation instructions
     if it looks complicated, download VirtualBox, grab the VM image


